// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/storage/storage.go

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/ntsd/backend-engineer-challenge-new/internal/model"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// CreateRepository mocks base method.
func (m *MockStorage) CreateRepository(repo *model.Repository) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRepository", repo)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRepository indicates an expected call of CreateRepository.
func (mr *MockStorageMockRecorder) CreateRepository(repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRepository", reflect.TypeOf((*MockStorage)(nil).CreateRepository), repo)
}

// CreateScan mocks base method.
func (m *MockStorage) CreateScan(scan *model.Scan) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateScan", scan)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateScan indicates an expected call of CreateScan.
func (mr *MockStorageMockRecorder) CreateScan(scan interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateScan", reflect.TypeOf((*MockStorage)(nil).CreateScan), scan)
}

// DeleteRepositoryByID mocks base method.
func (m *MockStorage) DeleteRepositoryByID(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRepositoryByID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRepositoryByID indicates an expected call of DeleteRepositoryByID.
func (mr *MockStorageMockRecorder) DeleteRepositoryByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRepositoryByID", reflect.TypeOf((*MockStorage)(nil).DeleteRepositoryByID), id)
}

// GetRepositoryByID mocks base method.
func (m *MockStorage) GetRepositoryByID(repo *model.Repository, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepositoryByID", repo, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetRepositoryByID indicates an expected call of GetRepositoryByID.
func (mr *MockStorageMockRecorder) GetRepositoryByID(repo, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepositoryByID", reflect.TypeOf((*MockStorage)(nil).GetRepositoryByID), repo, id)
}

// ListQueueScans mocks base method.
func (m *MockStorage) ListQueueScans(scans *[]model.Scan) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListQueueScans", scans)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListQueueScans indicates an expected call of ListQueueScans.
func (mr *MockStorageMockRecorder) ListQueueScans(scans interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQueueScans", reflect.TypeOf((*MockStorage)(nil).ListQueueScans), scans)
}

// ListRepositories mocks base method.
func (m *MockStorage) ListRepositories(repos *[]model.Repository) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRepositories", repos)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRepositories indicates an expected call of ListRepositories.
func (mr *MockStorageMockRecorder) ListRepositories(repos interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepositories", reflect.TypeOf((*MockStorage)(nil).ListRepositories), repos)
}

// UpdateRepositoryByID mocks base method.
func (m *MockStorage) UpdateRepositoryByID(repo *model.Repository, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRepositoryByID", repo, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRepositoryByID indicates an expected call of UpdateRepositoryByID.
func (mr *MockStorageMockRecorder) UpdateRepositoryByID(repo, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRepositoryByID", reflect.TypeOf((*MockStorage)(nil).UpdateRepositoryByID), repo, id)
}

// UpdateScanByID mocks base method.
func (m *MockStorage) UpdateScanByID(scan *model.Scan, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateScanByID", scan, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateScanByID indicates an expected call of UpdateScanByID.
func (mr *MockStorageMockRecorder) UpdateScanByID(scan, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateScanByID", reflect.TypeOf((*MockStorage)(nil).UpdateScanByID), scan, id)
}
